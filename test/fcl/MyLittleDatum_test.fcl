# FCL configuration for producing data, reading it with an
# analyzer, and writing that data out to a file

# The below is necessary boilerplate to load the messaging (logging) service
#include "messageDefaults.fcl"
services.message: @local::messageDefaults

# The name of this job (or process)
process_name:makeAndRead

# Definition of the input source. In this case, we tell ART
# to make two empty events. 
source: {
    module_type: EmptyEvent
    maxEvents:  2
}

# The @physics@ section describes the configuration of our ART modules
physics: {

    # List the _producers_ that we want to run
    producers: {

        # Here, we list the producers with a label and the module name.  
        # Note that this label is *very* important
        # because we will use it when we want to retrieve data from the event (see
        # @Lesson1/MyDatumReader_module.cc@ )
        mldTest: {
            module_type: MyLittleDatumProducer
        }

        # End the producers section
    }

    # List of the _analyzers_ we want to run
    analyzers: {
        hello: {
            module_type: MyLittleDatumAnalyzer
            input_label: mldTest
        }
    }


    # Define the analysis path of producers
    pathMake: [ mldTest ]

    # Define the analysis path of analyzers
    pathRead: [ hello ]

    # The trigger path defines what path of producers we want to run
    trigger_paths: [ pathMake ]

    # Usually, the path with analyzers goes into the @end_paths@. We also 
    # include the output stream so that it will get run and write events to the file.
    end_paths: [ pathRead ]

    # End the physics section
}